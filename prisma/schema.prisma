// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String?
  email               String               @unique
  password            String
  personalInfo        userPersonalInfo?    @relation(fields: [userPersonalInfoId], references: [id])
  userPersonalInfoId  Int?                 @unique
  nominee             Nominee?             @relation(fields: [nomineeId], references: [id])
  nomineeId           Int?                 @unique
  role                Role                 @default(MEMBER)
  member              memberInfo?          @relation(fields: [memberInfoId], references: [id])
  memberInfoId        Int?                 @unique
  isActive            Boolean              @default(true)
  isDeleted           Boolean              @default(false)
  deletedAt           DateTime?
  deletedBy           Int? // ID of admin who deleted
  deletionReason      String?
  isFirstLogin        Boolean              @default(true) // Added for first-time login
  passwordResetTokens PasswordResetToken[] // Relation to reset tokens
}

enum Role {
  SUPER_ADMIN
  MEMBER
  FOUNDER
  CO_FOUNDER
  EXECUTIVE_MEMBER
}

model userPersonalInfo {
  id                Int       @id @default(autoincrement())
  name              String?
  phone             String?
  email             String?
  dob               DateTime?
  address           String?
  ProfileImage      String?
  nidImageFrontPart String?
  nidImageBackPart  String?
  bloodGroup        String?
  gender            String?
  nid               String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User?     @relation
}

model Nominee {
  id                Int       @id @default(autoincrement())
  name              String
  phone             String
  email             String?
  dob               DateTime?
  address           String?
  nid               String?
  nidImageFrontPart String?
  bloodGroup        String?
  gender            String?
  nidImageBackPart  String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User?     @relation
}

model registrationFeeInfo {
  id         Int        @id @default(autoincrement())
  amount     Decimal    @db.Decimal(10, 2)
  receivedBy String?
  receivedAt DateTime   @default(now())
  notes      String?
  member     memberInfo @relation(fields: [memberId], references: [memberId])
  memberId   String     @unique
}

model memberInfo {
  id                  Int                  @id @default(autoincrement())
  type                String
  memberId            String               @unique
  joiningDate         DateTime?
  user                User?
  updatedAt           DateTime             @updatedAt
  createdAt           DateTime             @default(now())
  isActive            Boolean              @default(true)
  isDeleted           Boolean              @default(false)
  deletedAt           DateTime?
  PettyCashExpense    PettyCashExpense[]
  deposits            depositInfo[]        @relation("MemberDeposits")
  lateFees            lateFee[]            @relation("MemberFines")
  registrationFeeInfo registrationFeeInfo?
  Investment          Investment[]
  cashBalanceMember   CashBalanceMember?
}

model depositInfo {
  id          Int        @id @default(autoincrement())
  amount      Decimal    @db.Decimal(10, 2)
  depositDate DateTime
  notes       String?
  depositSlip String?
  year        Int
  month       Int
  day         Int
  member      memberInfo @relation("MemberDeposits", fields: [memberId], references: [memberId])
  memberId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  lateFee     lateFee?   @relation
}

model lateFee {
  id            Int         @id @default(autoincrement())
  amount        Decimal     @default(100) @db.Decimal(10, 2)
  feeDate       DateTime    @default(now())
  description   String?
  member        memberInfo  @relation("MemberFines", fields: [memberId], references: [memberId])
  memberId      String
  depositInfo   depositInfo @relation(fields: [depositInfoId], references: [id])
  depositInfoId Int         @unique // Enforces one-to-one with depositInfo
}

model CashBalance {
  id                   Int      @id @default(autoincrement())
  availableCash        Decimal  @default(0) @db.Decimal(10, 2)
  totalDeposit         Decimal  @default(0) @db.Decimal(10, 2)
  totalLateFee         Decimal  @default(0) @db.Decimal(10, 2)
  totalExpense         Decimal  @default(0) @db.Decimal(10, 2)
  totalInvestment      Decimal  @default(0) @db.Decimal(10, 2)
  totalProfit          Decimal  @default(0) @db.Decimal(10, 2)
  totalLoss            Decimal  @default(0) @db.Decimal(10, 2)
  totalRegistrationFee Decimal  @default(0) @db.Decimal(10, 2)
  updatedAt            DateTime @updatedAt
}

model CashBalanceMember {
  id                   Int        @id @default(autoincrement())
  memberId             String     @unique
  member               memberInfo @relation(fields: [memberId], references: [memberId])
  totalDeposit         Decimal    @default(0) @db.Decimal(10, 2)
  totalProfit          Decimal    @default(0) @db.Decimal(10, 2)
  totalLateFee         Decimal    @default(0) @db.Decimal(10, 2)
  totalRegistrationFee Decimal    @default(0) @db.Decimal(10, 2)
  totalLoss            Decimal    @default(0) @db.Decimal(10, 2)
  availableCash        Decimal    @default(0) @db.Decimal(10, 2)
  updatedAt            DateTime   @updatedAt
}

model PettyCashExpense {
  id             Int        @id @default(autoincrement())
  expenseType    String
  amount         Decimal    @db.Decimal(10, 2)
  paidTo         String?
  paidAt         DateTime   @default(now())
  description    String?
  paidByMemberId Int // ðŸ”— FK to memberInfo.id
  paidByMember   memberInfo @relation(fields: [paidByMemberId], references: [id])
}

model Investment {
  id                           Int              @id @default(autoincrement())
  InvestmentName               String
  amountInvested               Decimal          @db.Decimal(10, 2)
  InvestmentDescription        String?
  InvestmentStartDate          DateTime
  InvestmentEndDate            DateTime
  InvestmentContactPersonName  String
  InvestmentContactPersonPhone String
  InvestmentContactPersonEmail String?
  InvestmentContactPersonNID   String
  InvestmentContactPersonImage String?
  authorizedMember             memberInfo       @relation(fields: [authorizedMemberId], references: [id])
  authorizedMemberId           Int
  investedAt                   DateTime         @default(now())
  status                       InvestmentStatus @default(PENDING)
  profitLossAmount             Decimal?         @db.Decimal(10, 2) // positive = profit, negative = loss, null = not realized yet
  updatedAt                    DateTime         @updatedAt
}

enum InvestmentStatus {
  PENDING // investment is active, outcome not known yet
  PROFIT // investment gained profit
  LOSS // investment lost money
  CLOSED // closed with no profit or loss
  CANCELLED // investment cancelled before end date
  COMPLETE // investment completed with profit or loss realized
  IN_PROGRESS // investment is ongoing, but not yet completed
  FAILED // investment did not yield expected results or was unsuccessful
  ON_HOLD // investment temporarily paused or delayed
  REVIEW // investment under review for potential issues or adjustments
  ARCHIVED // investment completed and archived for records
  REJECTED // investment proposal rejected before funding
  APPROVED // investment proposal approved for funding
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}
