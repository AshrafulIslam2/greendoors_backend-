// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int               @id @default(autoincrement())
  name               String?
  email              String            @unique
  password           String
  personalInfo       userPersonalInfo? @relation(fields: [userPersonalInfoId], references: [id])
  userPersonalInfoId Int?              @unique
  nominee            Nominee?          @relation(fields: [nomineeId], references: [id])
  nomineeId          Int?              @unique
  role               Role              @default(MEMBER)
  member             memberInfo?       @relation(fields: [memberInfoId], references: [id])
  memberInfoId       Int?              @unique
}

enum Role {
  SUPER_ADMIN
  MEMBER
  FOUNDER
  CO_FOUNDER
  EXECUTIVE_MEMBER
}

model userPersonalInfo {
  id        Int       @id @default(autoincrement())
  name      String?
  phone     String?
  email     String?
  dob       DateTime?
  address   String?
  nid       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?     @relation
}

model memberInfo {
  id                  Int                  @id @default(autoincrement())
  type                String
  memberId            String               @unique
  joiningDate         DateTime?
  user                User?
  updatedAt           DateTime             @updatedAt
  createdAt           DateTime             @default(now())
  PettyCashExpense    PettyCashExpense[]
  deposits            depositInfo[]
  lateFees            lateFee[]
  registrationFeeInfo registrationFeeInfo?
  Investment          Investment[]
}

model Nominee {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String
  email     String?
  dob       DateTime?
  address   String?
  nid       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?     @relation
}

model registrationFeeInfo {
  id         Int        @id @default(autoincrement())
  amount     Decimal    @db.Decimal(10, 2)
  receivedBy String?
  receivedAt DateTime   @default(now())
  notes      String?
  member     memberInfo @relation(fields: [memberId], references: [id])
  memberId   Int        @unique
}

model depositInfo {
  id          Int        @id @default(autoincrement())
  amount      Decimal    @db.Decimal(10, 2)
  depositDate DateTime
  member      memberInfo @relation(fields: [memberId], references: [id])
  memberId    Int
  lateFee     lateFee?   @relation
}

model lateFee {
  id            Int         @id @default(autoincrement())
  amount        Decimal     @default(100) @db.Decimal(10, 2)
  feeDate       DateTime    @default(now())
  description   String?
  memberInfo    memberInfo  @relation(fields: [memberInfoId], references: [id])
  memberInfoId  Int
  depositInfo   depositInfo @relation(fields: [depositInfoId], references: [id])
  depositInfoId Int         @unique // Enforces one-to-one with depositInfo
}

model CashBalance {
  id              Int      @id @default(autoincrement())
  totalDeposit    Decimal  @default(0) @db.Decimal(10, 2)
  totalExpense    Decimal  @default(0) @db.Decimal(10, 2)
  totalInvestment Decimal  @default(0) @db.Decimal(10, 2)
  totalProfit     Decimal  @default(0) @db.Decimal(10, 2)
  totalLoss       Decimal  @default(0) @db.Decimal(10, 2)
  availableCash   Decimal  @default(0) @db.Decimal(10, 2)
  updatedAt       DateTime @updatedAt
}

model PettyCashExpense {
  id             Int        @id @default(autoincrement())
  expenseType    String
  amount         Decimal    @db.Decimal(10, 2)
  paidTo         String?
  paidAt         DateTime   @default(now())
  description    String?
  paidByMemberId Int // ðŸ”— FK to memberInfo.id
  paidByMember   memberInfo @relation(fields: [paidByMemberId], references: [id])
}

model Investment {
  id                           Int              @id @default(autoincrement())
  InvestmentName               String
  amountInvested               Decimal          @db.Decimal(10, 2)
  InvestmentDescription        String?
  InvestmentStartDate          DateTime
  InvestmentEndDate            DateTime
  InvestmentContactPersonName  String
  InvestmentContactPersonPhone String
  InvestmentContactPersonEmail String?
  InvestmentContactPersonNID   String
  InvestmentContactPersonImage String?
  authorizedMember             memberInfo       @relation(fields: [authorizedMemberId], references: [id])
  authorizedMemberId           Int
  investedAt                   DateTime         @default(now())
  status                       InvestmentStatus @default(PENDING)
  profitLossAmount             Decimal?         @db.Decimal(10, 2) // positive = profit, negative = loss, null = not realized yet
  updatedAt                    DateTime         @updatedAt
}

enum InvestmentStatus {
  PENDING // investment is active, outcome not known yet
  PROFIT // investment gained profit
  LOSS // investment lost money
  CLOSED // closed with no profit or loss
}
